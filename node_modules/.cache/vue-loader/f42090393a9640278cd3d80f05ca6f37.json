{"remainingRequest":"C:\\xampp\\htdocs\\WolfChat\\chat\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\WolfChat\\chat\\src\\views\\Messages.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\WolfChat\\chat\\src\\views\\Messages.vue","mtime":1564757888906},{"path":"C:\\xampp\\htdocs\\WolfChat\\chat\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\WolfChat\\chat\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\WolfChat\\chat\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\WolfChat\\chat\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport fb from '@/firebase/init'\r\nimport moment from 'moment'\r\nimport L from 'leaflet'\r\n\r\nexport default {\r\n    name: 'Messages',\r\n    data() {\r\n        return {\r\n            messages: [],\r\n            newmessage: null,\r\n            errorText: null,\r\n            username: localStorage.username,\r\n            chatId: localStorage.ChatId\r\n        }\r\n    },\r\n    methods: {\r\n        createMessage () {\r\n            if (this.newmessage) {\r\n                fb.collection('users/'+ this.chatId + '/messages').add({\r\n                    user: this.username,\r\n                    message: this.newmessage,\r\n                    timestamp: Date.now()\r\n                }).catch(err => {\r\n                    console.log(err);\r\n                });\r\n                this.newmessage = null;\r\n                this.errorText = null;\r\n            } else {\r\n                this.errorText = \"A message must be entered first!\";\r\n            }\r\n        }\r\n    },\r\n    created() {\r\n        let ref = fb.collection('users/'+ this.chatId + '/messages').orderBy('timestamp');\r\n        ref.onSnapshot(snapshot => {\r\n            snapshot.docChanges().forEach(change => {\r\n                if (change.type = 'added') {\r\n                    let doc = change.doc;\r\n                    this.messages.push({\r\n                        id: doc.id,\r\n                        user: doc.data().user,\r\n                        message: doc.data().message,\r\n                        timestamp: moment(doc.data().timestamp).format('LTS')\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        this.$root.$emit('showMarker');\r\n    },\r\n    beforeDestroy() {\r\n        this.$root.$emit('hideMarker');\r\n    }\r\n}\r\n",{"version":3,"sources":["Messages.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Messages.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n    <div class=\"container\" style=\"margin-bottom: 30px\">\r\n        <div class=\"\" v-for=\"message in messages\" :key=\"message.id\">\r\n            <div v-bind:class=\"{ sameuser:(message.user === this.localStorage.username)  }\" class=\"message-box\" >\r\n                <h5 class=\"text-info\">{{ message.user }}</h5>\r\n                <p>{{message.message}}</p>\r\n            </div>\r\n        </div>\r\n        <form @submit.prevent=\"createMessage\">\r\n            <div class=\"form-group\">\r\n                <input type=\"text\" name=\"message\" class=\"form-control\" placeholder=\"Enter message ...\" v-model=\"newmessage\">\r\n                <p class=\"text-danger\" v-if=\"errorText\">{{ errorText }}</p>\r\n            </div>\r\n            <button class=\"btn btn-primary\" type=\"submit\" name=\"action\">Send</button>\r\n        </form>\r\n        <!-- <div class=\"card-action\">\r\n            <CreateMessage :name=\"name\"/>\r\n        </div> -->\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport fb from '@/firebase/init'\r\nimport moment from 'moment'\r\nimport L from 'leaflet'\r\n\r\nexport default {\r\n    name: 'Messages',\r\n    data() {\r\n        return {\r\n            messages: [],\r\n            newmessage: null,\r\n            errorText: null,\r\n            username: localStorage.username,\r\n            chatId: localStorage.ChatId\r\n        }\r\n    },\r\n    methods: {\r\n        createMessage () {\r\n            if (this.newmessage) {\r\n                fb.collection('users/'+ this.chatId + '/messages').add({\r\n                    user: this.username,\r\n                    message: this.newmessage,\r\n                    timestamp: Date.now()\r\n                }).catch(err => {\r\n                    console.log(err);\r\n                });\r\n                this.newmessage = null;\r\n                this.errorText = null;\r\n            } else {\r\n                this.errorText = \"A message must be entered first!\";\r\n            }\r\n        }\r\n    },\r\n    created() {\r\n        let ref = fb.collection('users/'+ this.chatId + '/messages').orderBy('timestamp');\r\n        ref.onSnapshot(snapshot => {\r\n            snapshot.docChanges().forEach(change => {\r\n                if (change.type = 'added') {\r\n                    let doc = change.doc;\r\n                    this.messages.push({\r\n                        id: doc.id,\r\n                        user: doc.data().user,\r\n                        message: doc.data().message,\r\n                        timestamp: moment(doc.data().timestamp).format('LTS')\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        this.$root.$emit('showMarker');\r\n    },\r\n    beforeDestroy() {\r\n        this.$root.$emit('hideMarker');\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.message-box {\r\n    text-align: left;\r\n    background-color: rgba(147, 181, 226, 0.363);\r\n    width: 300px;\r\n}\r\n.sameuser {\r\n    background-color: blueviolet;\r\n}\r\n</style>"]}]}